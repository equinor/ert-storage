"""Record as inputs and outputs of ensembles

Revision ID: 9064db29af73
Revises: 9a218c7df2ac
Create Date: 2021-03-04 10:20:17.101013

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from enum import Enum


class RecordClass(str, Enum):
    normal = "normal"
    response = "response"
    parameter = "parameter"


# revision identifiers, used by Alembic.
revision = "9064db29af73"
down_revision = "9a218c7df2ac"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("ensemble", "parameters")
    op.drop_column("ensemble", "num_realizations")
    op.add_column("record", sa.Column("consumer_id", sa.Integer(), nullable=True))
    op.add_column("record", sa.Column("producer_id", sa.Integer(), nullable=True))
    enum_type = postgresql.ENUM(RecordClass, name="recordclass")
    enum_type.create(op.get_bind())
    op.add_column(
        "record", sa.Column("record_class", sa.Enum(RecordClass), nullable=False)
    )
    op.drop_constraint(
        "record_ensemble_id_realization_index_name_key", "record", type_="unique"
    )
    op.drop_constraint("record_ensemble_id_fkey", "record", type_="foreignkey")
    op.create_foreign_key(None, "record", "ensemble", ["consumer_id"], ["id"])
    op.create_foreign_key(None, "record", "ensemble", ["producer_id"], ["id"])
    op.drop_column("record", "is_response")
    op.drop_column("record", "ensemble_id")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "record",
        sa.Column("ensemble_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "record",
        sa.Column("is_response", sa.BOOLEAN(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "record", type_="foreignkey")
    op.drop_constraint(None, "record", type_="foreignkey")
    op.create_foreign_key(
        "record_ensemble_id_fkey", "record", "ensemble", ["ensemble_id"], ["id"]
    )
    op.create_unique_constraint(
        "record_ensemble_id_realization_index_name_key",
        "record",
        ["ensemble_id", "realization_index", "name"],
    )
    op.drop_column("record", "record_class")
    op.drop_column("record", "producer_id")
    op.drop_column("record", "consumer_id")
    op.add_column(
        "ensemble",
        sa.Column(
            "num_realizations", sa.INTEGER(), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "ensemble",
        sa.Column(
            "parameters",
            postgresql.ARRAY(postgresql.DOUBLE_PRECISION(precision=53)),
            autoincrement=False,
            nullable=False,
        ),
    )
    # ### end Alembic commands ###
